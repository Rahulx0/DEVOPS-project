name: Deploy to EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: urbangear-dev-frontend
  EKS_CLUSTER_NAME: urbangear-dev-cluster

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Guard against empty ECR_REPOSITORY to prevent invalid tags
        if [ -z "$ECR_REPOSITORY" ]; then
          echo "ERROR: ECR_REPOSITORY is empty. Cannot build Docker image." >&2
          exit 1
        fi
        
        # Debug variables
        echo "ECR_REGISTRY: '$ECR_REGISTRY'"
        echo "ECR_REPOSITORY: '$ECR_REPOSITORY'"
        echo "IMAGE_TAG: '$IMAGE_TAG'"
        echo "Full image name: '$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG'"
        
        # Build a docker container and push it to ECR
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update kube config
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update the image in the deployment
        cd manifests/overlays/prod
        kustomize edit set image urbangear-frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kubectl apply -k .
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/urbangear-frontend
        kubectl get services -o wide