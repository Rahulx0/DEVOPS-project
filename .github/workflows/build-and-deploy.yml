name: Build and Deploy

on:
  push:
    branches:
      - main
      - rahul
  pull_request:
    branches:
      - main
      - rahul

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-west-2' }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'urbangear-dev-frontend' }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME || 'urbangear-dev-cluster' }}
  KUBE_NAMESPACE: default

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      image-uri: ${{ steps.image.outputs.uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare image name and tags
        id: prepare-image
        run: |
          # Fallback ECR repository if secret is empty (avoid creating tags like :<sha>)
          if [ -z "${{ env.ECR_REPOSITORY }}" ]; then
            echo "ECR_REPOSITORY is empty. Setting to 'urbangear-dev-frontend' as fallback." >&2
            echo "ECR_REPOSITORY=urbangear-dev-frontend" >> $GITHUB_ENV
          fi

          IMAGE=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          TAG_SHA=$(echo "${GITHUB_SHA:-${{ github.sha }}}" | cut -c1-40)
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAG_SHA=$TAG_SHA" >> $GITHUB_ENV

      - name: Debug image variables
        run: |
          echo "Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "ECR_REPOSITORY: '${{ env.ECR_REPOSITORY }}'"
          echo "IMAGE: '${{ env.IMAGE }}'"
          echo "TAG_SHA: '${{ env.TAG_SHA }}'"

            - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG_SHA }}
          target: prod
          build-args: |
            NODE_ENV=production
            VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Set image metadata outputs
        id: image
        run: |
          echo "tag=${{ env.TAG_SHA }}" >> $GITHUB_OUTPUT
          echo "uri=${{ env.IMAGE }}:${{ env.TAG_SHA }}" >> $GITHUB_OUTPUT

      - name: Update deployment manifest
        run: |
          sed -i 's|484907531725.dkr.ecr.us-west-2.amazonaws.com/urbangear-dev-frontend:latest|${{ steps.image.outputs.uri }}|g' manifests/overlays/prod/deployment-patch.yaml

      - name: Upload updated manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: manifests/overlays/prod/deployment-patch.yaml

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/rahul') && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Download deployment manifest
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifest
          path: manifests/overlays/prod

      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl delete deployment urbangear-frontend --ignore-not-found=true
          kubectl apply -k manifests/overlays/prod/
          
          echo "Current deployment status:"
          kubectl get deployment urbangear-frontend -n ${{ env.KUBE_NAMESPACE }} -o wide

      - name: Verify deployment
        run: |
          echo "Checking deployment rollout status..."
          kubectl rollout status deployment/urbangear-frontend -n ${{ env.KUBE_NAMESPACE }} --timeout=5m
        continue-on-error: true

      - name: Debug deployment issues
        if: failure()
        run: |
          echo "=== Deployment Debug Information ==="
          kubectl describe deployment urbangear-frontend -n ${{ env.KUBE_NAMESPACE }}
          echo ""
          echo "=== Pod Status ==="
          kubectl get pods -l app=urbangear-frontend -n ${{ env.KUBE_NAMESPACE }} -o wide
          echo ""
          echo "=== Pod Logs ==="
          kubectl logs -l app=urbangear-frontend -n ${{ env.KUBE_NAMESPACE }} --tail=50 || true
          echo ""
          echo "=== Events ==="
          kubectl get events -n ${{ env.KUBE_NAMESPACE }} --sort-by='.lastTimestamp' | tail -20

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd app && npm ci

      - name: Build application
        run: |
          cd app && npm run build

      - name: Run linter
        run: |
          cd app && npm run lint 2>/dev/null || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: '.'
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true
